""" Credit: code taken and modified from https://github.com/amrit110/aoc """
#!/usr/bin/env python3
from os.path import dirname
from os.path import join
from os.path import realpath
import argparse
import pytest
import sys
import time

sys.path.append(join(dirname(realpath(__file__)), *[".."]))


def transform_input(input_):
    # custom transform for the day
    return input_


def read_input(file_name):
    with open(file_name, "r") as f:
        return f.read()


def solve_part1(input_):
    inp = transform_input(input_)
    pass


def solve_part2(input_):
    inp = transform_input(input_)
    pass


def parse_args():
    parser = argparse.ArgumentParser(description="Solution to {year} day {day}")
    parser.add_argument(
        "file_name",
        type=str,
        default="year{year}/day{day}/data/input.txt",
        nargs="?",
        help="Path to data file",
    )
    return parser.parse_args()


def main():
    parser = parse_args()
    input_ = read_input(parser.file_name)

    t0 = time.time()
    part1 = solve_part1(input_)
    time_part1 = round((time.time() - t0) * 1e3)
    print(f"Solution to part one: {{part1}} (time taken {{time_part1:.2f}}[ms])")

    t0 = time.time()
    part2 = solve_part2(input_)
    time_part2 = round((time.time() - t0) * 1e3)
    print(f"Solution to part two: {{part2}} (time taken {{time_part2:.2f}}[ms])")


if __name__ == "__main__":
    main()


@pytest.mark.parametrize("input1, output1", [("year{year}/day{day}/data/test_input0.txt", 1)])
def test1(input1, output1):
    assert solve_part1(read_input(input1)) == output1


@pytest.mark.parametrize("input2, output2", [("year{year}/day{day}/data/test_input0.txt", 1)])
def test2(input2, output2):
    assert solve_part2(read_input(input2)) == output2
    
